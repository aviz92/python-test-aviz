# https://pre-commit.com
# https://github.com/pre-commit

repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace       # Removes trailing spaces
      - id: end-of-file-fixer         # Ensures a file ends with a newline
      - id: check-merge-conflict      # Checks for merge conflict markers
      - id: check-added-large-files   # Prevents committing large files
        args: [ "--maxkb=100" ]       # Adjust size limit as needed
      - id: check-yaml                # Validates YAML syntax
      - id: check-json                # Validates JSON syntax
      - id: check-toml                # Validates TOML files
      - id: debug-statements          # Detects debug prints (e.g. `print`, `pdb`)
      - id: pretty-format-json        # Formats JSON files
        args: [
          "--autofix", "--no-sort-keys", "--indent", "4",  # Adjust indent as needed
        ]
      - id: check-ast               # Validates Python syntax
        name: Check Python syntax
        types: [ python ]           # Only run on Python files
      - id: detect-private-key      # Detects private keys in files
      - id: mixed-line-ending       # Detects mixed line endings

      # - id: requirements-txt-fixer    # Sorts and removes duplicates in requirements.txt files
      # - id: double-quote-string-fixer # Converts single quotes to double quotes in strings
      # - id: name-tests-test # Ensures test files, classes, and functions are named starting with 'test'


  - repo: https://github.com/pycqa/isort
    rev: 6.0.1
    hooks:
        - id: isort
          name: Run isort (Sort imports alphabetically)
          args: [
            "--profile", "black",  # Use the Black profile for consistent formatting
          ]
          types: [python]


  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.9.7
    hooks:
      - id: ruff
        args: [
          # "--fix",
          # "--exit-non-zero-on-fix", # CI fails if code was auto-fixed

          "--select=ANN",     # Selects annotations-related checks
          "--select=T20",     # Selects type-related checks

          "--ignore=ANN002",  # Ignore specific annotation checks
          "--ignore=ANN003",  # Ignore specific annotation checks
          "--ignore=Q000",    # Ignore specific quality checks
          "--ignore=Q001",    # Ignore specific quality checks
          "--ignore=Q002",    # Ignore specific quality checks
          "--ignore=BLE001",  # Ignore specific best practices checks
          "--ignore=EM102",   # Ignore specific error messages
          "--ignore=B904",    # Ignore specific best practices checks
        ]


  - repo: https://github.com/pycqa/flake8
    rev: 6.1.0  # or latest stable version
    hooks:
      - id: flake8
        args:
          - --select=E302,E303,E305  # blank lines
        types: [ python ]


  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        args: [
          "--strict",  # Enables all recommended static checks (strong typing discipline)
          "--ignore-missing-imports",  # Prevents errors for third-party packages without type hints
          # "--no-strict-optional", # Uncomment to allow implicit Optional[...] types (not recommended)
        ]
        additional_dependencies: [
          'types-beautifulsoup4',       # Type stubs for BeautifulSoup4
          'types-requests',             # Type stubs for `requests`
          'types-setuptools',           # Type stubs for `setuptools`
          'types-urllib3',              # Type stubs for `urllib3`
          'types-cachetools',           # Type stubs for `cachetools`
          'atlassian-python-api',       # Actual package
          'beautifulsoup4',             # Required for actual usage along with type stubs
          'httpx',                      # HTTP client library
          'python-dotenv',              # Loads environment variables from `.env` files
          'markdownify',                # HTML â†’ Markdown conversion
          'python-dateutil',            # Enhanced date/time parsing
          'types-python-dateutil',      # Type stubs for `dateutil`
        ]


  - repo: https://github.com/pycqa/pylint
    rev: v3.0.3
    hooks:
      - id: pylint
        name: pylint
        args:
          - "--rcfile=.pylintrc"
          - "--init-hook=import sys; sys.path.insert(0, 'src')"  # adjust a path
          - "--enable-all-extentions"
        additional_dependencies: [
          "pylint-django",  # Optional plugins
          "pylint-flask",  # Optional plugins
        ]
