name: Jira CI with PR Check
on:
  workflow_dispatch:
    inputs:
      jira_key:
        description: 'Jira ticket key'
        required: true
      sha:
        description: 'Commit SHA for PR status check'
        required: true
jobs:
  jira-ci:
    name: Jira Check for ${{ inputs.jira_key }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: write
      issues: write
      statuses: write
    env:
      JIRA_KEY: ${{ inputs.jira_key }}
      JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
      JIRA_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
      JIRA_DOMAIN: ${{ secrets.JIRA_DOMAIN }}
    steps:
      - name: Find PR Number
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            // ◊†◊ó◊§◊© PR ◊©◊û◊õ◊ô◊ú ◊ê◊™ ◊î-SHA ◊î◊ñ◊î
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });

            const pr = prs.data.find(pr => pr.head.sha === '${{ inputs.sha }}');
            if (pr) {
              core.setOutput('number', pr.number);
              return pr.number;
            } else {
              core.setFailed('Could not find PR for this SHA');
            }

      - name: Create Check Run
        id: create-check
        uses: actions/github-script@v7
        with:
          script: |
            const jiraUrl = `https://${{ secrets.JIRA_DOMAIN }}/browse/${{ inputs.jira_key }}`;
            const response = await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: `Jira Check ‚Äì ${{ inputs.jira_key }}`,
              head_sha: '${{ inputs.sha }}',
              status: 'in_progress',
              started_at: new Date().toISOString(),
              output: {
                title: 'Jira Status Check',
                summary: `üîó **[Click here to view Jira ticket ${{ inputs.jira_key }}](${jiraUrl})**\n\n‚è≥ Waiting for ticket to be marked as Done...`,
                text: `Monitoring Jira ticket: ${{ inputs.jira_key }}\nDirect link: ${jiraUrl}`
              }
            });
            core.setOutput('check_run_id', response.data.id);

      - name: Comment on PR - Starting
        uses: actions/github-script@v7
        with:
          script: |
            const jiraUrl = `https://${{ secrets.JIRA_DOMAIN }}/browse/${{ inputs.jira_key }}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.pr.outputs.number }},
              body: `üîÑ **Jira Check Started**\n\nüé´ **[${jira_key}](${jiraUrl})** - Waiting for ticket to be marked as Done...\n\n‚è≥ This PR will be ready to merge once the Jira ticket is completed.`
                .replace('${jira_key}', '${{ inputs.jira_key }}')
            });
      - name: Wait for Jira to be DONE
        id: jira-wait
        run: |
          jira_url="https://${JIRA_DOMAIN}/rest/api/3/issue/${JIRA_KEY}"
          auth_header="Authorization: Basic $(echo -n "${JIRA_EMAIL}:${JIRA_TOKEN}" | base64)"
          for ((i=1;i<=60;i++)); do
            status=$(curl -s -H "Accept: application/json" -H "${auth_header}" "${jira_url}" | jq -r '.fields.status.name')
            echo "Status: $status"
            if [[ "$status" == "Done" ]]; then
              echo "done=true" >> $GITHUB_OUTPUT
              exit 0
            fi
            sleep 30
          done
          echo "done=false" >> $GITHUB_OUTPUT
          exit 1
      - name: Finalize Check Run
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const jiraUrl = `https://${{ secrets.JIRA_DOMAIN }}/browse/${{ inputs.jira_key }}`;
            const conclusion = "${{ steps.jira-wait.outputs.done }}" === "true" ? "success" : "failure";
            const statusIcon = conclusion === "success" ? "‚úÖ" : "‚ùå";
            const statusText = conclusion === "success" ? "Done" : "NOT Done";

            await github.rest.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              check_run_id: Number("${{ steps.create-check.outputs.check_run_id }}"),
              completed_at: new Date().toISOString(),
              conclusion,
              output: {
                title: 'Jira Status Check',
                summary: `üîó **[Click here to view Jira ticket ${{ inputs.jira_key }}](${jiraUrl})**\n\n${statusIcon} Jira ticket is ${statusText}`,
                text: `Final status for Jira ticket: ${{ inputs.jira_key }}\nDirect link: ${jiraUrl}`
              }
            });

      - name: Comment on PR - Final Status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const jiraUrl = `https://${{ secrets.JIRA_DOMAIN }}/browse/${{ inputs.jira_key }}`;
            const isDone = "${{ steps.jira-wait.outputs.done }}" === "true";
            const statusIcon = isDone ? "‚úÖ" : "‚ùå";
            const statusText = isDone ? "**DONE**" : "**NOT DONE**";
            const actionText = isDone ? "üéâ This PR is now ready to merge!" : "‚ö†Ô∏è This PR cannot be merged until the Jira ticket is completed.";

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.pr.outputs.number }},
              body: `${statusIcon} **Jira Check Complete**\n\nüé´ **[${jira_key}](${jiraUrl})** is ${statusText}\n\n${actionText}`
                .replace('${jira_key}', '${{ inputs.jira_key }}')
            });
